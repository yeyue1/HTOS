name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  static-analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Verify repository structure
        run: |
          echo "Current directory: $(pwd)"
          echo "Directory contents:"
          ls -la
          echo "Checking for source directories:"
          [ -d kernel ] && echo "✓ kernel directory exists" || echo "✗ kernel directory missing"
          [ -d include ] && echo "✓ include directory exists" || echo "✗ include directory missing"
          echo "Finding C source files:"
          find . -type f \( -name "*.c" -o -name "*.h" \) | head -20

      - name: Install clang-tidy and cppcheck
        run: |
          sudo apt-get update
          sudo apt-get install -y clang-tidy cppcheck

      - name: Run clang-tidy (Primary Check)
        continue-on-error: true
        run: |
          echo "=== Running clang-tidy analysis ==="
          FILES=$(find kernel include -type f \( -name "*.c" -o -name "*.h" \) 2>/dev/null || true)
          if [ -z "$FILES" ]; then
            FILES=$(find . -type f \( -name "*.c" -o -name "*.h" \) -not -path "*/\.*" 2>/dev/null || true)
          fi
          if [ -z "$FILES" ]; then
            echo "No C files found"
            exit 0
          fi
          echo "$FILES" | while IFS= read -r f; do
            echo "Analyzing: $f"
            clang-tidy "$f" \
              --checks="*,-llvmlibc-*,-altera-*,-fuchsia-*,-android-*,-darwin-*,-zircon-*,-abseil-*,-boost-*,-google-*,-hicpp-*,-modernize-*,-readability-identifier-length,-readability-magic-numbers,-cppcoreguidelines-avoid-magic-numbers,-cert-dcl37-c,-cert-dcl51-cpp,-bugprone-easily-swappable-parameters,-readability-function-cognitive-complexity" \
              --warnings-as-errors="" \
              -- -std=c11 \
              -I. -Iinclude -Ikernel \
              -DSTM32F103xB \
              -DconfigTICK_RATE_HZ=1000 \
              -DconfigMAX_PRIORITIES=32 \
              -DconfigMINIMAL_STACK_SIZE=128 \
              -DconfigMAX_TASK_NAME_LEN=16 \
              -DconfigTOTAL_HEAP_SIZE=12288 \
              -DconfigUSE_RECURSIVE_MUTEXES=1 \
              2>&1 | tee -a clang-tidy.log || true
          done
          echo "clang-tidy finished"

      - name: Run cppcheck (Secondary Check)
        run: |
          echo "=== Running cppcheck analysis ==="
          
          # 检查目录是否存在
          DIRS=""
          [ -d include ] && DIRS="$DIRS include"
          [ -d kernel ] && DIRS="$DIRS kernel"
          
          if [ -z "$DIRS" ]; then
            echo "Warning: No source directories found"
            exit 0
          fi
          
          cppcheck \
            --language=c --std=c11 \
            --enable=warning,style,performance,portability \
            --addon=misra \
            --inline-suppr \
            --suppress=misra-c2012-* \
            --suppress=unknownMacro \
            --suppress=misra-config \
            --template="{file}:{line}: [{severity}] {id} {message}" \
            --xml --xml-version=2 \
            -Iinclude \
            -DconfigTICK_RATE_HZ=1000 \
            -DconfigMAX_PRIORITIES=32 \
            -DconfigMINIMAL_STACK_SIZE=128 \
            -DconfigTOTAL_HEAP_SIZE=12288 \
            -DSTM32F103xB \
            $DIRS 2> cppcheck-report.xml || true
          
          # 显示报告摘要
          if [ -f cppcheck-report.xml ]; then
            echo "Cppcheck analysis completed."
            ERROR_COUNT=$(grep -c "<error" cppcheck-report.xml || echo "0")
            echo "Total issues found: $ERROR_COUNT"
            
            # 显示前10个错误
            echo "Sample issues:"
            grep "<error" cppcheck-report.xml | head -10 || true
          fi

      - name: Ensure analysis logs exist
        run: |
          [ -f clang-tidy.log ] || touch clang-tidy.log
          [ -f cppcheck-report.xml ] || touch cppcheck-report.xml

      - name: Upload analysis reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: static-analysis-reports
          path: |
            cppcheck-report.xml
            clang-tidy.log

  unit-test:
    runs-on: ubuntu-latest
    needs: static-analysis
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install GCC and Make
        run: sudo apt-get update && sudo apt-get install -y gcc make

      - name: Build and Run Unit Tests
        run: |
          if [ -d tests ]; then
            cd tests
            if [ -f Makefile ]; then
              echo "Running tests..."
              make all || echo "Build failed"
              make test || echo "Tests failed"
            else
              echo "No Makefile found in tests directory"
            fi
          else
            echo "Tests directory not found, skipping unit tests"
          fi

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: tests/test_results.txt
        continue-on-error: true

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install security tools
        run: |
          sudo apt-get update
          sudo apt-get install -y flawfinder cppcheck

      - name: Run Flawfinder (Security Scanner)
        run: |
          echo "=== Running security analysis ==="
          flawfinder --minlevel=0 --html --context . > flawfinder-report.html || true
          flawfinder --minlevel=1 . || true

      - name: Run cppcheck security checks
        run: |
          cppcheck \
            --enable=warning,style,performance,portability,information \
            --addon=cert \
            --addon=threadsafety \
            --suppress=misra-c2012-* \
            --suppress=unknownMacro \
            --template="{file}:{line}: [{severity}] {id} {message}" \
            --xml --xml-version=2 \
            -Iinclude \
            . 2> security-report.xml || true

      - name: Upload security reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            flawfinder-report.html
            security-report.xml

  code-metrics:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install analysis tools
        run: |
          sudo apt-get update
          sudo apt-get install -y cloc lizard

      - name: Count lines of code
        run: |
          echo "=== Code Statistics ==="
          cloc . --exclude-dir=.git,.github --json > cloc-report.json
          cloc . --exclude-dir=.git,.github

      - name: Complexity analysis
        run: |
          echo "=== Cyclomatic Complexity Analysis ==="
          lizard -l c -o lizard-report.html . || true
          lizard -l c . || true

      - name: Upload metrics reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: code-metrics
          path: |
            cloc-report.json
            lizard-report.html

  documentation-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Doxygen
        run: sudo apt-get update && sudo apt-get install -y doxygen graphviz

      - name: Check documentation coverage
        run: |
          echo "=== Documentation Coverage Analysis ==="
          # 创建临时 Doxyfile
          cat > Doxyfile.temp <<EOF
          PROJECT_NAME = "HTOS"
          INPUT = kernel include
          RECURSIVE = YES
          GENERATE_HTML = YES
          GENERATE_LATEX = NO
          EXTRACT_ALL = NO
          EXTRACT_PRIVATE = YES
          EXTRACT_STATIC = YES
          WARNINGS = YES
          WARN_IF_UNDOCUMENTED = YES
          WARN_IF_DOC_ERROR = YES
          WARN_NO_PARAMDOC = YES
          EOF
          
          doxygen Doxyfile.temp 2>&1 | tee doxygen.log || true
          
          # 统计文档覆盖率
          echo "Documentation warnings:"
          grep -i "warning" doxygen.log | wc -l || echo "0"

      - name: Upload documentation reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: documentation-reports
          path: |
            doxygen.log
            html/

  dependency-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Analyze includes and dependencies
        run: |
          echo "=== Dependency Analysis ==="
          
          # 检查循环依赖
          echo "Checking for circular dependencies..."
          find . -name "*.c" -o -name "*.h" | while read file; do
            echo "File: $file"
            grep -E "^#include" "$file" || true
          done > dependencies.txt
          
          # 检查未使用的包含
          echo "Checking for unused includes..."
          if command -v include-what-you-use &> /dev/null; then
            find . -name "*.c" | while read file; do
              include-what-you-use "$file" 2>&1 || true
            done > iwyu-report.txt
          else
            echo "include-what-you-use not available"
          fi

      - name: Upload dependency reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dependency-reports
          path: |
            dependencies.txt
            iwyu-report.txt
        continue-on-error: true

  code-coverage-analysis:
    runs-on: ubuntu-latest
    needs: unit-test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install coverage tools
        run: |
          sudo apt-get update
          sudo apt-get install -y gcovr lcov

      - name: Analyze test coverage
        run: |
          echo "=== Code Coverage Analysis ==="
          if [ -d tests ]; then
            # 检查是否有覆盖率数据文件
            if find tests -name "*.gcda" -o -name "*.gcno" | grep -q .; then
              echo "Found coverage data files"
              
              # 生成覆盖率报告
              gcovr -r . --html --html-details -o coverage.html || true
              gcovr -r . --xml -o coverage.xml || true
              gcovr -r . || true
            else
              echo "No coverage data found. Tests need to be compiled with --coverage flag"
              echo "Add to tests/Makefile: CFLAGS += --coverage"
            fi
          else
            echo "No tests directory found"
          fi

      - name: Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            coverage.html
            coverage.xml
        continue-on-error: true

