name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  static-analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Verify repository structure
        run: |
          echo "Current directory: $(pwd)"
          echo "Directory contents:"
          ls -la
          echo "Checking for source directories:"
          [ -d kernel ] && echo "✓ kernel directory exists" || echo "✗ kernel directory missing"
          [ -d include ] && echo "✓ include directory exists" || echo "✗ include directory missing"
          echo "Finding C source files:"
          find . -type f \( -name "*.c" -o -name "*.h" \) | head -20

      - name: Install clang-tidy and cppcheck
        run: |
          sudo apt-get update
          sudo apt-get install -y clang-tidy cppcheck

      - name: Run clang-tidy (Primary Check)
        continue-on-error: true
        run: |
          echo "=== Running clang-tidy analysis ==="
          
          # 查找所有C源文件和头文件
          FILES=$(find kernel include -type f \( -name "*.c" -o -name "*.h" \) 2>/dev/null || true)
          
          if [ -z "$FILES" ]; then
            echo "Warning: No C source files found in kernel/include directories"
            echo "Searching in current directory instead..."
            FILES=$(find . -type f \( -name "*.c" -o -name "*.h" \) -not -path "*/\.*" 2>/dev/null || true)
          fi
          
          if [ -z "$FILES" ]; then
            echo "Error: No C source files found anywhere"
            exit 0
          fi
          
          echo "Found files:"
          echo "$FILES" | head -10
          echo "..."
          echo "Total: $(echo "$FILES" | wc -l) files"
          
          # 运行 clang-tidy
          echo "$FILES" | xargs -n1 -I{} sh -c '
            echo "Analyzing: {}"
            clang-tidy {} \
              --checks="*,-llvmlibc-*,-altera-*,-fuchsia-*,-android-*,-darwin-*,-zircon-*,-abseil-*,-boost-*,-google-*,-hicpp-*,-modernize-*,-readability-identifier-length,-readability-magic-numbers,-cppcoreguidelines-avoid-magic-numbers,-cert-dcl37-c,-cert-dcl51-cpp,-bugprone-easily-swappable-parameters,-readability-function-cognitive-complexity" \
              --warnings-as-errors="" \
              -- -std=c11 \
              -Iinclude \
              -I/usr/include \
              -DSTM32F103xB \
              -D__GNUC__ \
              -DconfigTICK_RATE_HZ=1000 \
              -DconfigMAX_PRIORITIES=32 \
              -DconfigMINIMAL_STACK_SIZE=128 \
              -DconfigMAX_TASK_NAME_LEN=16 \
              -DconfigTOTAL_HEAP_SIZE=12288 \
              -DconfigUSE_RECURSIVE_MUTEXES=1 \
              2>&1 || true
          ' || echo "clang-tidy completed with warnings"

      - name: Run cppcheck (Secondary Check)
        run: |
          echo "=== Running cppcheck analysis ==="
          
          # 检查目录是否存在
          DIRS=""
          [ -d include ] && DIRS="$DIRS include"
          [ -d kernel ] && DIRS="$DIRS kernel"
          
          if [ -z "$DIRS" ]; then
            echo "Warning: No source directories found"
            exit 0
          fi
          
          cppcheck \
            --language=c --std=c11 \
            --enable=warning,style,performance,portability \
            --addon=misra \
            --inline-suppr \
            --suppress=misra-c2012-* \
            --suppress=unknownMacro \
            --suppress=misra-config \
            --template="{file}:{line}: [{severity}] {id} {message}" \
            --xml --xml-version=2 \
            -Iinclude \
            -DconfigTICK_RATE_HZ=1000 \
            -DconfigMAX_PRIORITIES=32 \
            -DconfigMINIMAL_STACK_SIZE=128 \
            -DconfigTOTAL_HEAP_SIZE=12288 \
            -DSTM32F103xB \
            $DIRS 2> cppcheck-report.xml || true
          
          # 显示报告摘要
          if [ -f cppcheck-report.xml ]; then
            echo "Cppcheck analysis completed."
            ERROR_COUNT=$(grep -c "<error" cppcheck-report.xml || echo "0")
            echo "Total issues found: $ERROR_COUNT"
            
            # 显示前10个错误
            echo "Sample issues:"
            grep "<error" cppcheck-report.xml | head -10 || true
          fi

      - name: Upload analysis reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: static-analysis-reports
          path: |
            cppcheck-report.xml

  unit-test:
    runs-on: ubuntu-latest
    needs: static-analysis
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install GCC and Make
        run: sudo apt-get update && sudo apt-get install -y gcc make

      - name: Build and Run Unit Tests
        run: |
          if [ -d tests ]; then
            cd tests
            if [ -f Makefile ]; then
              echo "Running tests..."
              make all || echo "Build failed"
              make test || echo "Tests failed"
            else
              echo "No Makefile found in tests directory"
            fi
          else
            echo "Tests directory not found, skipping unit tests"
          fi

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: tests/test_results.txt
        continue-on-error: true